[buildout]
extends =
    http://good-py.appspot.com/release/dexterity/1.0-next?plone=4.1rc3

extensions =
    mr.developer
    buildout.dumppickedversions

unzip = true
versions = versions
develop =
sources = sources

parts =
    instance
    zopepy
    lxml
    test
    coverage
    omelette

auto-checkout =
    plone.app.tinymce

    plone.formwidget.multifile
    plone.formwidget.querystring
    plone.app.deco

    plone.app.drafts

    plone.tiles
    plone.directives.tiles
    plone.app.tiles
    plone.app.standardtiles

    plone.app.page

    plone.app.blocks

    plone.app.querystring
    plone.app.search

    plone.resource

    z3c.form

    plone.subrequest

    Products.ResourceRegistries

    plone.app.cmsui

#    Products.CMFPlone

always-checkout = force

[versions]
mr.developer = 1.17

collective.recipe.template = 1.8
collective.recipe.omelette = 0.10
z3c.recipe.staticlxml = 0.7.2
zc.recipe.cmmi = 1.3.4

interlude = 1.1.1

collective.xmltestreport = 1.2
collective.autopermission = 1.0b1

lxml = 2.2.6

repoze.xmliter = 0.2
zope.globalrequest = 1.0
five.globalrequest = 1.0

plone.app.jquerytools = 1.3
plone.app.z3cform = 0.5.5

[instance]
recipe = plone.recipe.zope2instance
blob-storage = ${buildout:directory}/var/blobstorage
user = admin:admin
http-address = 8080
debug-mode = on
verbose-security = on
eggs =
    plone.app.deco
    plone.reload
    faulthandler
    plone.app.cmsui
    Pillow

[sources]
plone.app.tinymce                 = svn https://svn.plone.org/svn/plone/plone.app.tinymce/trunk

plone.formwidget.multifile        = svn https://svn.plone.org/svn/plone/plone.formwidget.multifile/trunk
plone.formwidget.querystring      = svn https://svn.plone.org/svn/plone/plone.formwidget.querystring/trunk
plone.app.deco                    = svn https://svn.plone.org/svn/plone/plone.app.deco/trunk

plone.app.drafts                  = svn https://svn.plone.org/svn/plone/plone.app.drafts/trunk

plone.tiles                       = svn https://svn.plone.org/svn/plone/plone.tiles/trunk
plone.directives.tiles            = svn https://svn.plone.org/svn/plone/plone.directives.tiles/trunk
plone.app.tiles                   = svn https://svn.plone.org/svn/plone/plone.app.tiles/trunk
plone.app.standardtiles           = svn https://svn.plone.org/svn/plone/plone.app.standardtiles/trunk

plone.app.page                    = svn https://svn.plone.org/svn/plone/plone.app.page/trunk

plone.app.blocks                  = svn https://svn.plone.org/svn/plone/plone.app.blocks/trunk

plone.app.querystring             = svn https://svn.plone.org/svn/plone/plone.app.querystring/trunk
plone.app.search                  = svn https://svn.plone.org/svn/plone/plone.app.search/trunk

plone.resource                    = svn https://svn.plone.org/svn/plone/plone.resource/trunk

z3c.form                          = svn http://svn.zope.org/repos/main/z3c.form/trunk

plone.subrequest                  = svn https://svn.plone.org/svn/plone/plone.subrequest/trunk

Products.ResourceRegistries       = svn https://svn.plone.org/svn/plone/ResourceRegistries/branches/optilude-resource-bundles
plone.app.cmsui                   = git https://github.com/plone/plone.app.cmsui.git

# custom versions of some packages
#Products.CMFPlone                 = svn https://svn.plone.org/svn/plone/Products.CMFPlone/branches/deco-integration


[test]
recipe = zc.recipe.testrunner
eggs =
    plone.app.tinymce [test]

    plone.formwidget.querystring

    plone.app.deco [test]
    plone.app.drafts [test]

    plone.tiles [test]
    plone.directives.tiles 
    plone.app.tiles [test]
    plone.app.standardtiles [test]

    plone.app.page [test]

    plone.app.blocks [test]

    plone.app.querystring

    plone.resource [test]
    plone.subrequest [test]


[coverage]
recipe = collective.recipe.template
input = inline:
    #!/bin/sh
    ./bin/test --coverage ../../coverage -v --auto-progress "$@"
output = ${buildout:directory}/bin/coverage
mode = 755

[lxml]
recipe = z3c.recipe.staticlxml
egg = lxml == ${versions:lxml}

[zopepy]
recipe = zc.recipe.egg
eggs = ${instance:eggs}
interpreter = zopepy
scripts = zopepy

[omelette]
recipe = collective.recipe.omelette
eggs = ${instance:eggs}
